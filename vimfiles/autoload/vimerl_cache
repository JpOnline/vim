{'lists': [{'word': 'all(', 'kind': 'f', 'abbr': 'all(Pred, List) -> boolean()', 'dup': 1}, {'word': 'any(', 'kind': 'f', 'abbr': 'any(Pred, List) -> boolean()', 'dup': 1}, {'word': 'append(', 'kind': 'f', 'abbr': 'append(List1, List2) -> List3', 'dup': 1}, {'word': 'append(', 'kind': 'f', 'abbr': 'append(ListOfLists) -> List1', 'dup': 1}, {'word': 'concat(', 'kind': 'f', 'abbr': 'concat(Things) -> string()', 'dup': 1}, {'word': 'delete(', 'kind': 'f', 'abbr': 'delete(Elem, List1) -> List2', 'dup': 1}, {'word': 'dropwhile(', 'kind': 'f', 'abbr': 'dropwhile(Pred, List1) -> List2', 'dup': 1}, {'word': 'duplicate(', 'kind': 'f', 'abbr': 'duplicate(N, Elem) -> List', 'dup': 1}, {'word': 'filter(', 'kind': 'f', 'abbr': 'filter(Pred, List1) -> List2', 'dup': 1}, {'word': 'flatlength(', 'kind': 'f', 'abbr': 'flatlength(DeepList) -> non_neg_integer()', 'dup': 1}, {'word': 'flatmap(', 'kind': 'f', 'abbr': 'flatmap(Fun, List1) -> List2', 'dup': 1}, {'word': 'flatten(', 'kind': 'f', 'abbr': 'flatten(DeepList) -> List', 'dup': 1}, {'word': 'flatten(', 'kind': 'f', 'abbr': 'flatten(DeepList, Tail) -> List', 'dup': 1}, {'word': 'foldl(', 'kind': 'f', 'abbr': 'foldl(Fun, Acc0, List) -> Acc1', 'dup': 1}, {'word': 'foldr(', 'kind': 'f', 'abbr': 'foldr(Fun, Acc0, List) -> Acc1', 'dup': 1}, {'word': 'foreach(', 'kind': 'f', 'abbr': 'foreach(Fun, List) -> ok', 'dup': 1}, {'word': 'keydelete(', 'kind': 'f', 'abbr': 'keydelete(Key, N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keyfind(', 'kind': 'f', 'abbr': 'keyfind/3', 'dup': 1}, {'word': 'keymap(', 'kind': 'f', 'abbr': 'keymap(Fun, N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keymember(', 'kind': 'f', 'abbr': 'keymember/3', 'dup': 1}, {'word': 'keymerge(', 'kind': 'f', 'abbr': 'keymerge(N, TupleList1, TupleList2) -> TupleList3', 'dup': 1}, {'word': 'keyreplace(', 'kind': 'f', 'abbr': 'keyreplace(Key, N, TupleList1, NewTuple) -> TupleList2', 'dup': 1}, {'word': 'keysearch(', 'kind': 'f', 'abbr': 'keysearch/3', 'dup': 1}, {'word': 'keysort(', 'kind': 'f', 'abbr': 'keysort(N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keystore(', 'kind': 'f', 'abbr': 'keystore(Key, N, TupleList1, NewTuple) -> TupleList2', 'dup': 1}, {'word': 'keytake(', 'kind': 'f', 'abbr': 'keytake(Key, N, TupleList1) -> {value, Tuple, TupleList2} | false', 'dup': 1}, {'word': 'last(', 'kind': 'f', 'abbr': 'last(List) -> Last', 'dup': 1}, {'word': 'map(', 'kind': 'f', 'abbr': 'map(Fun, List1) -> List2', 'dup': 1}, {'word': 'mapfoldl(', 'kind': 'f', 'abbr': 'mapfoldl(Fun, Acc0, List1) -> {List2, Acc1}', 'dup': 1}, {'word': 'mapfoldr(', 'kind': 'f', 'abbr': 'mapfoldr(Fun, Acc0, List1) -> {List2, Acc1}', 'dup': 1}, {'word': 'max(', 'kind': 'f', 'abbr': 'max(List) -> Max', 'dup': 1}, {'word': 'member(', 'kind': 'f', 'abbr': 'member/2', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(ListOfLists) -> List1', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(List1, List2) -> List3', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(Fun, List1, List2) -> List3', 'dup': 1}, {'word': 'merge3(', 'kind': 'f', 'abbr': 'merge3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'min(', 'kind': 'f', 'abbr': 'min(List) -> Min', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'nth(', 'kind': 'f', 'abbr': 'nth(N, List) -> Elem', 'dup': 1}, {'word': 'nthtail(', 'kind': 'f', 'abbr': 'nthtail(N, List) -> Tail', 'dup': 1}, {'word': 'partition(', 'kind': 'f', 'abbr': 'partition(Pred, List) -> {Satisfying, NotSatisfying}', 'dup': 1}, {'word': 'prefix(', 'kind': 'f', 'abbr': 'prefix(List1, List2) -> boolean()', 'dup': 1}, {'word': 'reverse(', 'kind': 'f', 'abbr': 'reverse(List1) -> List2', 'dup': 1}, {'word': 'reverse(', 'kind': 'f', 'abbr': 'reverse/2', 'dup': 1}, {'word': 'rkeymerge(', 'kind': 'f', 'abbr': 'rkeymerge(Index, X, Y) -> [R]', 'dup': 1}, {'word': 'rmerge(', 'kind': 'f', 'abbr': 'rmerge(X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rmerge(', 'kind': 'f', 'abbr': 'rmerge(Fun, X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rmerge3(', 'kind': 'f', 'abbr': 'rmerge3(X, Y, Z) -> [(X | Y | Z)]', 'dup': 1}, {'word': 'rukeymerge(', 'kind': 'f', 'abbr': 'rukeymerge(Index, X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rumerge(', 'kind': 'f', 'abbr': 'rumerge(Fun, X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rumerge(', 'kind': 'f', 'abbr': 'rumerge(X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rumerge3(', 'kind': 'f', 'abbr': 'rumerge3(X, Y, Z) -> [(X | Y | Z)]', 'dup': 1}, {'word': 'seq(', 'kind': 'f', 'abbr': 'seq(From, To) -> Seq', 'dup': 1}, {'word': 'seq(', 'kind': 'f', 'abbr': 'seq(From, To, Incr) -> Seq', 'dup': 1}, {'word': 'sort(', 'kind': 'f', 'abbr': 'sort(List1) -> List2', 'dup': 1}, {'word': 'sort(', 'kind': 'f', 'abbr': 'sort(Fun, List1) -> List2', 'dup': 1}, {'word': 'split(', 'kind': 'f', 'abbr': 'split(N, List1) -> {List2, List3}', 'dup': 1}, {'word': 'splitwith(', 'kind': 'f', 'abbr': 'splitwith(Pred, List) -> {List1, List2}', 'dup': 1}, {'word': 'sublist(', 'kind': 'f', 'abbr': 'sublist(List1, Start, Len) -> List2', 'dup': 1}, {'word': 'sublist(', 'kind': 'f', 'abbr': 'sublist(List1, Len) -> List2', 'dup': 1}, {'word': 'subtract(', 'kind': 'f', 'abbr': 'subtract(List1, List2) -> List3', 'dup': 1}, {'word': 'suffix(', 'kind': 'f', 'abbr': 'suffix(List1, List2) -> boolean()', 'dup': 1}, {'word': 'sum(', 'kind': 'f', 'abbr': 'sum(List) -> number()', 'dup': 1}, {'word': 'takewhile(', 'kind': 'f', 'abbr': 'takewhile(Pred, List1) -> List2', 'dup': 1}, {'word': 'ukeymerge(', 'kind': 'f', 'abbr': 'ukeymerge(N, TupleList1, TupleList2) -> TupleList3', 'dup': 1}, {'word': 'ukeysort(', 'kind': 'f', 'abbr': 'ukeysort(N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(Fun, List1, List2) -> List3', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(ListOfLists) -> List1', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(List1, List2) -> List3', 'dup': 1}, {'word': 'umerge3(', 'kind': 'f', 'abbr': 'umerge3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'unzip(', 'kind': 'f', 'abbr': 'unzip(List1) -> {List2, List3}', 'dup': 1}, {'word': 'unzip3(', 'kind': 'f', 'abbr': 'unzip3(List1) -> {List2, List3, List4}', 'dup': 1}, {'word': 'usort(', 'kind': 'f', 'abbr': 'usort(Fun, List1) -> List2', 'dup': 1}, {'word': 'usort(', 'kind': 'f', 'abbr': 'usort(List1) -> List2', 'dup': 1}, {'word': 'zf(', 'kind': 'f', 'abbr': 'zf(F, T) -> [(T | X)]', 'dup': 1}, {'word': 'zip(', 'kind': 'f', 'abbr': 'zip(List1, List2) -> List3', 'dup': 1}, {'word': 'zip3(', 'kind': 'f', 'abbr': 'zip3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'zipwith(', 'kind': 'f', 'abbr': 'zipwith(Combine, List1, List2) -> List3', 'dup': 1}, {'word': 'zipwith3(', 'kind': 'f', 'abbr': 'zipwith3(Combine, List1, List2, List3) -> List4', 'dup': 1}]}
{'erlang': [{'word': '(', 'kind': 'f', 'abbr': '!/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '*/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '+/1', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '+/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '++/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '-/1', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '-/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '--/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '//2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '/=/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '</2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '=/=/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '=:=/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '=</2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '==/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '>/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '>=/2', 'dup': 1}, {'word': 'abs(', 'kind': 'f', 'abbr': 'abs/1', 'dup': 1}, {'word': 'adler32(', 'kind': 'f', 'abbr': 'adler32/2', 'dup': 1}, {'word': 'adler32(', 'kind': 'f', 'abbr': 'adler32/1', 'dup': 1}, {'word': 'adler32_combine(', 'kind': 'f', 'abbr': 'adler32_combine/3', 'dup': 1}, {'word': 'alloc_info(', 'kind': 'f', 'abbr': 'alloc_info/1', 'dup': 1}, {'word': 'alloc_sizes(', 'kind': 'f', 'abbr': 'alloc_sizes/1', 'dup': 1}, {'word': 'and(', 'kind': 'f', 'abbr': 'and/2', 'dup': 1}, {'word': 'append(', 'kind': 'f', 'abbr': 'append/2', 'dup': 1}, {'word': 'append_element(', 'kind': 'f', 'abbr': 'append_element/2', 'dup': 1}, {'word': 'apply(', 'kind': 'f', 'abbr': 'apply(Fun, Args) -> term()', 'dup': 1}, {'word': 'apply(', 'kind': 'f', 'abbr': 'apply(Module, Function, Args) -> term()', 'dup': 1}, {'word': 'atom_to_binary(', 'kind': 'f', 'abbr': 'atom_to_binary/2', 'dup': 1}, {'word': 'atom_to_list(', 'kind': 'f', 'abbr': 'atom_to_list/1', 'dup': 1}, {'word': 'await_proc_exit(', 'kind': 'f', 'abbr': 'await_proc_exit(Proc, Op, Data) -> term()', 'dup': 1}, {'word': 'await_sched_wall_time_modifications(', 'kind': 'f', 'abbr': 'await_sched_wall_time_modifications(Ref, Result) -> boolean()', 'dup': 1}, {'word': 'band(', 'kind': 'f', 'abbr': 'band/2', 'dup': 1}, {'word': 'binary_part(', 'kind': 'f', 'abbr': 'binary_part/3', 'dup': 1}, {'word': 'binary_part(', 'kind': 'f', 'abbr': 'binary_part/2', 'dup': 1}, {'word': 'binary_to_atom(', 'kind': 'f', 'abbr': 'binary_to_atom/2', 'dup': 1}, {'word': 'binary_to_existing_atom(', 'kind': 'f', 'abbr': 'binary_to_existing_atom/2', 'dup': 1}, {'word': 'binary_to_list(', 'kind': 'f', 'abbr': 'binary_to_list/3', 'dup': 1}, {'word': 'binary_to_list(', 'kind': 'f', 'abbr': 'binary_to_list/1', 'dup': 1}, {'word': 'binary_to_term(', 'kind': 'f', 'abbr': 'binary_to_term/2', 'dup': 1}, {'word': 'binary_to_term(', 'kind': 'f', 'abbr': 'binary_to_term/1', 'dup': 1}, {'word': 'bit_size(', 'kind': 'f', 'abbr': 'bit_size/1', 'dup': 1}, {'word': 'bitstring_to_list(', 'kind': 'f', 'abbr': 'bitstring_to_list/1', 'dup': 1}, {'word': 'bnot(', 'kind': 'f', 'abbr': 'bnot/1', 'dup': 1}, {'word': 'bor(', 'kind': 'f', 'abbr': 'bor/2', 'dup': 1}, {'word': 'bsl(', 'kind': 'f', 'abbr': 'bsl/2', 'dup': 1}, {'word': 'bsr(', 'kind': 'f', 'abbr': 'bsr/2', 'dup': 1}, {'word': 'bump_reductions(', 'kind': 'f', 'abbr': 'bump_reductions/1', 'dup': 1}, {'word': 'bxor(', 'kind': 'f', 'abbr': 'bxor/2', 'dup': 1}, {'word': 'byte_size(', 'kind': 'f', 'abbr': 'byte_size/1', 'dup': 1}, {'word': 'call_on_load_function(', 'kind': 'f', 'abbr': 'call_on_load_function/1', 'dup': 1}, {'word': 'cancel_timer(', 'kind': 'f', 'abbr': 'cancel_timer/1', 'dup': 1}, {'word': 'check_old_code(', 'kind': 'f', 'abbr': 'check_old_code/1', 'dup': 1}, {'word': 'check_process_code(', 'kind': 'f', 'abbr': 'check_process_code/2', 'dup': 1}, {'word': 'crasher(', 'kind': 'f', 'abbr': 'crasher/6', 'dup': 1}, {'word': 'crc32(', 'kind': 'f', 'abbr': 'crc32/2', 'dup': 1}, {'word': 'crc32(', 'kind': 'f', 'abbr': 'crc32/1', 'dup': 1}, {'word': 'crc32_combine(', 'kind': 'f', 'abbr': 'crc32_combine/3', 'dup': 1}, {'word': 'date(', 'kind': 'f', 'abbr': 'date/0', 'dup': 1}, {'word': 'decode_packet(', 'kind': 'f', 'abbr': 'decode_packet/3', 'dup': 1}, {'word': 'delay_trap(', 'kind': 'f', 'abbr': 'delay_trap(Result, Timeout) -> Result', 'dup': 1}, {'word': 'delete_module(', 'kind': 'f', 'abbr': 'delete_module/1', 'dup': 1}, {'word': 'demonitor(', 'kind': 'f', 'abbr': 'demonitor/2', 'dup': 1}, {'word': 'demonitor(', 'kind': 'f', 'abbr': 'demonitor/1', 'dup': 1}, {'word': 'dexit(', 'kind': 'f', 'abbr': 'dexit/2', 'dup': 1}, {'word': 'dgroup_leader(', 'kind': 'f', 'abbr': 'dgroup_leader/2', 'dup': 1}, {'word': 'disconnect_node(', 'kind': 'f', 'abbr': 'disconnect_node(Node) -> boolean() | ignored', 'dup': 1}, {'word': 'display(', 'kind': 'f', 'abbr': 'display/1', 'dup': 1}, {'word': 'display_nl(', 'kind': 'f', 'abbr': 'display_nl/0', 'dup': 1}, {'word': 'display_string(', 'kind': 'f', 'abbr': 'display_string/1', 'dup': 1}, {'word': 'dist_exit(', 'kind': 'f', 'abbr': 'dist_exit/3', 'dup': 1}, {'word': 'div(', 'kind': 'f', 'abbr': 'div/2', 'dup': 1}, {'word': 'dlink(', 'kind': 'f', 'abbr': 'dlink(Pid) -> true', 'dup': 1}, {'word': 'dmonitor_node(', 'kind': 'f', 'abbr': 'dmonitor_node/3', 'dup': 1}, {'word': 'dmonitor_p(', 'kind': 'f', 'abbr': 'dmonitor_p(X1, ProcSpec) -> reference()', 'dup': 1}, {'word': 'dsend(', 'kind': 'f', 'abbr': 'dsend/3', 'dup': 1}, {'word': 'dsend(', 'kind': 'f', 'abbr': 'dsend/2', 'dup': 1}, {'word': 'dt_append_vm_tag_data(', 'kind': 'f', 'abbr': 'dt_append_vm_tag_data/1', 'dup': 1}, {'word': 'dt_get_tag(', 'kind': 'f', 'abbr': 'dt_get_tag/0', 'dup': 1}, {'word': 'dt_get_tag_data(', 'kind': 'f', 'abbr': 'dt_get_tag_data/0', 'dup': 1}, {'word': 'dt_prepend_vm_tag_data(', 'kind': 'f', 'abbr': 'dt_prepend_vm_tag_data/1', 'dup': 1}, {'word': 'dt_put_tag(', 'kind': 'f', 'abbr': 'dt_put_tag/1', 'dup': 1}, {'word': 'dt_restore_tag(', 'kind': 'f', 'abbr': 'dt_restore_tag/1', 'dup': 1}, {'word': 'dt_spread_tag(', 'kind': 'f', 'abbr': 'dt_spread_tag/1', 'dup': 1}, {'word': 'dunlink(', 'kind': 'f', 'abbr': 'dunlink(Pid) -> true', 'dup': 1}, {'word': 'element(', 'kind': 'f', 'abbr': 'element/2', 'dup': 1}, {'word': 'erase(', 'kind': 'f', 'abbr': 'erase/1', 'dup': 1}, {'word': 'erase(', 'kind': 'f', 'abbr': 'erase/0', 'dup': 1}, {'word': 'error(', 'kind': 'f', 'abbr': 'error/2', 'dup': 1}, {'word': 'error(', 'kind': 'f', 'abbr': 'error/1', 'dup': 1}, {'word': 'exit(', 'kind': 'f', 'abbr': 'exit/2', 'dup': 1}, {'word': 'exit(', 'kind': 'f', 'abbr': 'exit/1', 'dup': 1}, {'word': 'external_size(', 'kind': 'f', 'abbr': 'external_size/2', 'dup': 1}, {'word': 'external_size(', 'kind': 'f', 'abbr': 'external_size/1', 'dup': 1}, {'word': 'finish_after_on_load(', 'kind': 'f', 'abbr': 'finish_after_on_load/2', 'dup': 1}, {'word': 'float(', 'kind': 'f', 'abbr': 'float/1', 'dup': 1}, {'word': 'float_to_list(', 'kind': 'f', 'abbr': 'float_to_list/1', 'dup': 1}, {'word': 'flush_monitor_message(', 'kind': 'f', 'abbr': 'flush_monitor_message/2', 'dup': 1}, {'word': 'format_cpu_topology(', 'kind': 'f', 'abbr': 'format_cpu_topology/1', 'dup': 1}, {'word': 'fun_info(', 'kind': 'f', 'abbr': 'fun_info(Fun) -> [{Item, Info}]', 'dup': 1}, {'word': 'fun_info(', 'kind': 'f', 'abbr': 'fun_info/2', 'dup': 1}, {'word': 'fun_to_list(', 'kind': 'f', 'abbr': 'fun_to_list/1', 'dup': 1}, {'word': 'function_exported(', 'kind': 'f', 'abbr': 'function_exported/3', 'dup': 1}, {'word': 'garbage_collect(', 'kind': 'f', 'abbr': 'garbage_collect/1', 'dup': 1}, {'word': 'garbage_collect(', 'kind': 'f', 'abbr': 'garbage_collect/0', 'dup': 1}, {'word': 'garbage_collect_message_area(', 'kind': 'f', 'abbr': 'garbage_collect_message_area/0', 'dup': 1}, {'word': 'gather_sched_wall_time_result(', 'kind': 'f', 'abbr': 'gather_sched_wall_time_result(Ref) -> [{pos_integer(), non_neg_integer(), non_neg_integer()}]', 'dup': 1}, {'word': 'get(', 'kind': 'f', 'abbr': 'get/1', 'dup': 1}, {'word': 'get(', 'kind': 'f', 'abbr': 'get/0', 'dup': 1}, {'word': 'get_cookie(', 'kind': 'f', 'abbr': 'get_cookie() -> Cookie | nocookie', 'dup': 1}, {'word': 'get_keys(', 'kind': 'f', 'abbr': 'get_keys/1', 'dup': 1}, {'word': 'get_module_info(', 'kind': 'f', 'abbr': 'get_module_info/2', 'dup': 1}, {'word': 'get_module_info(', 'kind': 'f', 'abbr': 'get_module_info/1', 'dup': 1}, {'word': 'get_stacktrace(', 'kind': 'f', 'abbr': 'get_stacktrace/0', 'dup': 1}, {'word': 'group_leader(', 'kind': 'f', 'abbr': 'group_leader/2', 'dup': 1}, {'word': 'group_leader(', 'kind': 'f', 'abbr': 'group_leader/0', 'dup': 1}, {'word': 'halt(', 'kind': 'f', 'abbr': 'halt/2', 'dup': 1}, {'word': 'halt(', 'kind': 'f', 'abbr': 'halt/1', 'dup': 1}, {'word': 'halt(', 'kind': 'f', 'abbr': 'halt/0', 'dup': 1}, {'word': 'hash(', 'kind': 'f', 'abbr': 'hash/2', 'dup': 1}, {'word': 'hd(', 'kind': 'f', 'abbr': 'hd/1', 'dup': 1}, {'word': 'hibernate(', 'kind': 'f', 'abbr': 'hibernate/3', 'dup': 1}, {'word': 'integer_to_list(', 'kind': 'f', 'abbr': 'integer_to_list(Integer, Base) -> string()', 'dup': 1}, {'word': 'integer_to_list(', 'kind': 'f', 'abbr': 'integer_to_list/1', 'dup': 1}, {'word': 'iolist_size(', 'kind': 'f', 'abbr': 'iolist_size/1', 'dup': 1}, {'word': 'iolist_to_binary(', 'kind': 'f', 'abbr': 'iolist_to_binary/1', 'dup': 1}, {'word': 'is_alive(', 'kind': 'f', 'abbr': 'is_alive/0', 'dup': 1}, {'word': 'is_atom(', 'kind': 'f', 'abbr': 'is_atom/1', 'dup': 1}, {'word': 'is_binary(', 'kind': 'f', 'abbr': 'is_binary/1', 'dup': 1}, {'word': 'is_bitstring(', 'kind': 'f', 'abbr': 'is_bitstring/1', 'dup': 1}, {'word': 'is_boolean(', 'kind': 'f', 'abbr': 'is_boolean/1', 'dup': 1}, {'word': 'is_builtin(', 'kind': 'f', 'abbr': 'is_builtin/3', 'dup': 1}, {'word': 'is_float(', 'kind': 'f', 'abbr': 'is_float/1', 'dup': 1}, {'word': 'is_function(', 'kind': 'f', 'abbr': 'is_function/2', 'dup': 1}, {'word': 'is_function(', 'kind': 'f', 'abbr': 'is_function/1', 'dup': 1}, {'word': 'is_integer(', 'kind': 'f', 'abbr': 'is_integer/1', 'dup': 1}, {'word': 'is_list(', 'kind': 'f', 'abbr': 'is_list/1', 'dup': 1}, {'word': 'is_number(', 'kind': 'f', 'abbr': 'is_number/1', 'dup': 1}, {'word': 'is_pid(', 'kind': 'f', 'abbr': 'is_pid/1', 'dup': 1}, {'word': 'is_port(', 'kind': 'f', 'abbr': 'is_port/1', 'dup': 1}, {'word': 'is_process_alive(', 'kind': 'f', 'abbr': 'is_process_alive/1', 'dup': 1}, {'word': 'is_record(', 'kind': 'f', 'abbr': 'is_record/3', 'dup': 1}, {'word': 'is_record(', 'kind': 'f', 'abbr': 'is_record/2', 'dup': 1}, {'word': 'is_reference(', 'kind': 'f', 'abbr': 'is_reference/1', 'dup': 1}, {'word': 'is_tuple(', 'kind': 'f', 'abbr': 'is_tuple/1', 'dup': 1}, {'word': 'length(', 'kind': 'f', 'abbr': 'length/1', 'dup': 1}, {'word': 'link(', 'kind': 'f', 'abbr': 'link/1', 'dup': 1}, {'word': 'list_to_atom(', 'kind': 'f', 'abbr': 'list_to_atom/1', 'dup': 1}, {'word': 'list_to_binary(', 'kind': 'f', 'abbr': 'list_to_binary/1', 'dup': 1}, {'word': 'list_to_bitstring(', 'kind': 'f', 'abbr': 'list_to_bitstring/1', 'dup': 1}, {'word': 'list_to_existing_atom(', 'kind': 'f', 'abbr': 'list_to_existing_atom/1', 'dup': 1}, {'word': 'list_to_float(', 'kind': 'f', 'abbr': 'list_to_float/1', 'dup': 1}, {'word': 'list_to_integer(', 'kind': 'f', 'abbr': 'list_to_integer(String, Base) -> integer()', 'dup': 1}, {'word': 'list_to_integer(', 'kind': 'f', 'abbr': 'list_to_integer/1', 'dup': 1}, {'word': 'list_to_pid(', 'kind': 'f', 'abbr': 'list_to_pid/1', 'dup': 1}, {'word': 'list_to_tuple(', 'kind': 'f', 'abbr': 'list_to_tuple/1', 'dup': 1}, {'word': 'load_module(', 'kind': 'f', 'abbr': 'load_module/2', 'dup': 1}, {'word': 'load_nif(', 'kind': 'f', 'abbr': 'load_nif/2', 'dup': 1}, {'word': 'loaded(', 'kind': 'f', 'abbr': 'loaded/0', 'dup': 1}, {'word': 'localtime(', 'kind': 'f', 'abbr': 'localtime/0', 'dup': 1}, {'word': 'localtime_to_universaltime(', 'kind': 'f', 'abbr': 'localtime_to_universaltime(Localtime) -> {Date2, Time2}', 'dup': 1}, {'word': 'localtime_to_universaltime(', 'kind': 'f', 'abbr': 'localtime_to_universaltime/2', 'dup': 1}, {'word': 'make_fun(', 'kind': 'f', 'abbr': 'make_fun/3', 'dup': 1}, {'word': 'make_ref(', 'kind': 'f', 'abbr': 'make_ref/0', 'dup': 1}, {'word': 'make_tuple(', 'kind': 'f', 'abbr': 'make_tuple/3', 'dup': 1}, {'word': 'make_tuple(', 'kind': 'f', 'abbr': 'make_tuple/2', 'dup': 1}, {'word': 'match_spec_test(', 'kind': 'f', 'abbr': 'match_spec_test/3', 'dup': 1}, {'word': 'max(', 'kind': 'f', 'abbr': 'max(Term1, Term2) -> Maximum', 'dup': 1}, {'word': 'md5(', 'kind': 'f', 'abbr': 'md5/1', 'dup': 1}, {'word': 'md5_final(', 'kind': 'f', 'abbr': 'md5_final/1', 'dup': 1}, {'word': 'md5_init(', 'kind': 'f', 'abbr': 'md5_init/0', 'dup': 1}, {'word': 'md5_update(', 'kind': 'f', 'abbr': 'md5_update/2', 'dup': 1}, {'word': 'memory(', 'kind': 'f', 'abbr': 'memory() -> [{memory_type(), non_neg_integer()}]', 'dup': 1}, {'word': 'memory(', 'kind': 'f', 'abbr': 'memory(Type) -> non_neg_integer() | [{memory_type(), non_neg_integer()}]', 'dup': 1}, {'word': 'min(', 'kind': 'f', 'abbr': 'min(Term1, Term2) -> Minimum', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'module_loaded(', 'kind': 'f', 'abbr': 'module_loaded/1', 'dup': 1}, {'word': 'monitor(', 'kind': 'f', 'abbr': 'monitor/2', 'dup': 1}, {'word': 'monitor_node(', 'kind': 'f', 'abbr': 'monitor_node/3', 'dup': 1}, {'word': 'monitor_node(', 'kind': 'f', 'abbr': 'monitor_node/2', 'dup': 1}, {'word': 'nif_error(', 'kind': 'f', 'abbr': 'nif_error/2', 'dup': 1}, {'word': 'nif_error(', 'kind': 'f', 'abbr': 'nif_error/1', 'dup': 1}, {'word': 'node(', 'kind': 'f', 'abbr': 'node/0', 'dup': 1}, {'word': 'node(', 'kind': 'f', 'abbr': 'node/1', 'dup': 1}, {'word': 'nodes(', 'kind': 'f', 'abbr': 'nodes() -> Nodes', 'dup': 1}, {'word': 'nodes(', 'kind': 'f', 'abbr': 'nodes/1', 'dup': 1}, {'word': 'not(', 'kind': 'f', 'abbr': 'not/1', 'dup': 1}, {'word': 'now(', 'kind': 'f', 'abbr': 'now/0', 'dup': 1}, {'word': 'open_port(', 'kind': 'f', 'abbr': 'open_port/2', 'dup': 1}, {'word': 'or(', 'kind': 'f', 'abbr': 'or/2', 'dup': 1}, {'word': 'phash(', 'kind': 'f', 'abbr': 'phash/2', 'dup': 1}, {'word': 'phash2(', 'kind': 'f', 'abbr': 'phash2/2', 'dup': 1}, {'word': 'phash2(', 'kind': 'f', 'abbr': 'phash2/1', 'dup': 1}, {'word': 'pid_to_list(', 'kind': 'f', 'abbr': 'pid_to_list/1', 'dup': 1}, {'word': 'port_call(', 'kind': 'f', 'abbr': 'port_call/3', 'dup': 1}, {'word': 'port_call(', 'kind': 'f', 'abbr': 'port_call/2', 'dup': 1}, {'word': 'port_close(', 'kind': 'f', 'abbr': 'port_close/1', 'dup': 1}, {'word': 'port_command(', 'kind': 'f', 'abbr': 'port_command/3', 'dup': 1}, {'word': 'port_command(', 'kind': 'f', 'abbr': 'port_command/2', 'dup': 1}, {'word': 'port_connect(', 'kind': 'f', 'abbr': 'port_connect/2', 'dup': 1}, {'word': 'port_control(', 'kind': 'f', 'abbr': 'port_control/3', 'dup': 1}, {'word': 'port_get_data(', 'kind': 'f', 'abbr': 'port_get_data/1', 'dup': 1}, {'word': 'port_info(', 'kind': 'f', 'abbr': 'port_info/2', 'dup': 1}, {'word': 'port_info(', 'kind': 'f', 'abbr': 'port_info/1', 'dup': 1}, {'word': 'port_set_data(', 'kind': 'f', 'abbr': 'port_set_data/2', 'dup': 1}, {'word': 'port_to_list(', 'kind': 'f', 'abbr': 'port_to_list/1', 'dup': 1}, {'word': 'ports(', 'kind': 'f', 'abbr': 'ports/0', 'dup': 1}, {'word': 'posixtime_to_universaltime(', 'kind': 'f', 'abbr': 'posixtime_to_universaltime/1', 'dup': 1}, {'word': 'pre_loaded(', 'kind': 'f', 'abbr': 'pre_loaded/0', 'dup': 1}, {'word': 'process_display(', 'kind': 'f', 'abbr': 'process_display/2', 'dup': 1}, {'word': 'process_flag(', 'kind': 'f', 'abbr': 'process_flag/3', 'dup': 1}, {'word': 'process_flag(', 'kind': 'f', 'abbr': 'process_flag/2', 'dup': 1}, {'word': 'process_info(', 'kind': 'f', 'abbr': 'process_info/2', 'dup': 1}, {'word': 'process_info(', 'kind': 'f', 'abbr': 'process_info/1', 'dup': 1}, {'word': 'processes(', 'kind': 'f', 'abbr': 'processes/0', 'dup': 1}, {'word': 'purge_module(', 'kind': 'f', 'abbr': 'purge_module/1', 'dup': 1}, {'word': 'put(', 'kind': 'f', 'abbr': 'put/2', 'dup': 1}, {'word': 'raise(', 'kind': 'f', 'abbr': 'raise/3', 'dup': 1}, {'word': 'read_timer(', 'kind': 'f', 'abbr': 'read_timer/1', 'dup': 1}, {'word': 'ref_to_list(', 'kind': 'f', 'abbr': 'ref_to_list/1', 'dup': 1}, {'word': 'register(', 'kind': 'f', 'abbr': 'register/2', 'dup': 1}, {'word': 'registered(', 'kind': 'f', 'abbr': 'registered/0', 'dup': 1}, {'word': 'rem(', 'kind': 'f', 'abbr': 'rem/2', 'dup': 1}, {'word': 'resume_process(', 'kind': 'f', 'abbr': 'resume_process/1', 'dup': 1}, {'word': 'round(', 'kind': 'f', 'abbr': 'round/1', 'dup': 1}, {'word': 'self(', 'kind': 'f', 'abbr': 'self/0', 'dup': 1}, {'word': 'send(', 'kind': 'f', 'abbr': 'send/3', 'dup': 1}, {'word': 'send(', 'kind': 'f', 'abbr': 'send/2', 'dup': 1}, {'word': 'send_after(', 'kind': 'f', 'abbr': 'send_after/3', 'dup': 1}, {'word': 'send_nosuspend(', 'kind': 'f', 'abbr': 'send_nosuspend(Dest, Msg) -> boolean()', 'dup': 1}, {'word': 'send_nosuspend(', 'kind': 'f', 'abbr': 'send_nosuspend(Dest, Msg, Options) -> boolean()', 'dup': 1}, {'word': 'seq_trace(', 'kind': 'f', 'abbr': 'seq_trace/2', 'dup': 1}, {'word': 'seq_trace_info(', 'kind': 'f', 'abbr': 'seq_trace_info/1', 'dup': 1}, {'word': 'seq_trace_print(', 'kind': 'f', 'abbr': 'seq_trace_print/2', 'dup': 1}, {'word': 'seq_trace_print(', 'kind': 'f', 'abbr': 'seq_trace_print/1', 'dup': 1}, {'word': 'set_cookie(', 'kind': 'f', 'abbr': 'set_cookie(Node, Cookie) -> true', 'dup': 1}, {'word': 'set_cpu_topology(', 'kind': 'f', 'abbr': 'set_cpu_topology/1', 'dup': 1}, {'word': 'setelement(', 'kind': 'f', 'abbr': 'setelement/3', 'dup': 1}, {'word': 'setnode(', 'kind': 'f', 'abbr': 'setnode/3', 'dup': 1}, {'word': 'setnode(', 'kind': 'f', 'abbr': 'setnode/2', 'dup': 1}, {'word': 'size(', 'kind': 'f', 'abbr': 'size/1', 'dup': 1}, {'word': 'spawn(', 'kind': 'f', 'abbr': 'spawn(Fun) -> pid()', 'dup': 1}, {'word': 'spawn(', 'kind': 'f', 'abbr': 'spawn(Node, Fun) -> pid()', 'dup': 1}, {'word': 'spawn(', 'kind': 'f', 'abbr': 'spawn(Node, Module, Function, Args) -> pid()', 'dup': 1}, {'word': 'spawn(', 'kind': 'f', 'abbr': 'spawn/3', 'dup': 1}, {'word': 'spawn_link(', 'kind': 'f', 'abbr': 'spawn_link(Fun) -> pid()', 'dup': 1}, {'word': 'spawn_link(', 'kind': 'f', 'abbr': 'spawn_link(Node, Fun) -> pid()', 'dup': 1}, {'word': 'spawn_link(', 'kind': 'f', 'abbr': 'spawn_link(Node, Module, Function, Args) -> pid()', 'dup': 1}, {'word': 'spawn_link(', 'kind': 'f', 'abbr': 'spawn_link/3', 'dup': 1}, {'word': 'spawn_monitor(', 'kind': 'f', 'abbr': 'spawn_monitor(Fun) -> {pid(), reference()}', 'dup': 1}, {'word': 'spawn_monitor(', 'kind': 'f', 'abbr': 'spawn_monitor(Module, Function, Args) -> {pid(), reference()}', 'dup': 1}, {'word': 'spawn_opt(', 'kind': 'f', 'abbr': 'spawn_opt(Fun, Options) -> pid() | {pid(), reference()}', 'dup': 1}, {'word': 'spawn_opt(', 'kind': 'f', 'abbr': 'spawn_opt(Node, Fun, Options) -> pid() | {pid(), reference()}', 'dup': 1}, {'word': 'spawn_opt(', 'kind': 'f', 'abbr': 'spawn_opt(Module, Function, Args, Options) -> pid() | {pid(), reference()}', 'dup': 1}, {'word': 'spawn_opt(', 'kind': 'f', 'abbr': 'spawn_opt(Node, Module, Function, Args, Options) -> pid() | {pid(), reference()}', 'dup': 1}, {'word': 'spawn_opt(', 'kind': 'f', 'abbr': 'spawn_opt/1', 'dup': 1}, {'word': 'split_binary(', 'kind': 'f', 'abbr': 'split_binary/2', 'dup': 1}, {'word': 'start_timer(', 'kind': 'f', 'abbr': 'start_timer/3', 'dup': 1}, {'word': 'statistics(', 'kind': 'f', 'abbr': 'statistics/1', 'dup': 1}, {'word': 'subtract(', 'kind': 'f', 'abbr': 'subtract/2', 'dup': 1}, {'word': 'suspend_process(', 'kind': 'f', 'abbr': 'suspend_process(Suspendee) -> true', 'dup': 1}, {'word': 'suspend_process(', 'kind': 'f', 'abbr': 'suspend_process/2', 'dup': 1}, {'word': 'system_flag(', 'kind': 'f', 'abbr': 'system_flag/2', 'dup': 1}, {'word': 'system_info(', 'kind': 'f', 'abbr': 'system_info/1', 'dup': 1}, {'word': 'system_monitor(', 'kind': 'f', 'abbr': 'system_monitor/2', 'dup': 1}, {'word': 'system_monitor(', 'kind': 'f', 'abbr': 'system_monitor/1', 'dup': 1}, {'word': 'system_monitor(', 'kind': 'f', 'abbr': 'system_monitor/0', 'dup': 1}, {'word': 'system_profile(', 'kind': 'f', 'abbr': 'system_profile/0', 'dup': 1}, {'word': 'system_profile(', 'kind': 'f', 'abbr': 'system_profile/2', 'dup': 1}, {'word': 'term_to_binary(', 'kind': 'f', 'abbr': 'term_to_binary/2', 'dup': 1}, {'word': 'term_to_binary(', 'kind': 'f', 'abbr': 'term_to_binary/1', 'dup': 1}, {'word': 'throw(', 'kind': 'f', 'abbr': 'throw/1', 'dup': 1}, {'word': 'time(', 'kind': 'f', 'abbr': 'time/0', 'dup': 1}, {'word': 'tl(', 'kind': 'f', 'abbr': 'tl/1', 'dup': 1}, {'word': 'trace(', 'kind': 'f', 'abbr': 'trace/3', 'dup': 1}, {'word': 'trace_delivered(', 'kind': 'f', 'abbr': 'trace_delivered/1', 'dup': 1}, {'word': 'trace_info(', 'kind': 'f', 'abbr': 'trace_info/2', 'dup': 1}, {'word': 'trace_pattern(', 'kind': 'f', 'abbr': 'trace_pattern/3', 'dup': 1}, {'word': 'trace_pattern(', 'kind': 'f', 'abbr': 'trace_pattern/2', 'dup': 1}, {'word': 'trunc(', 'kind': 'f', 'abbr': 'trunc/1', 'dup': 1}, {'word': 'tuple_size(', 'kind': 'f', 'abbr': 'tuple_size/1', 'dup': 1}, {'word': 'tuple_to_list(', 'kind': 'f', 'abbr': 'tuple_to_list/1', 'dup': 1}, {'word': 'universaltime(', 'kind': 'f', 'abbr': 'universaltime/0', 'dup': 1}, {'word': 'universaltime_to_localtime(', 'kind': 'f', 'abbr': 'universaltime_to_localtime/1', 'dup': 1}, {'word': 'universaltime_to_posixtime(', 'kind': 'f', 'abbr': 'universaltime_to_posixtime/1', 'dup': 1}, {'word': 'unlink(', 'kind': 'f', 'abbr': 'unlink/1', 'dup': 1}, {'word': 'unregister(', 'kind': 'f', 'abbr': 'unregister/1', 'dup': 1}, {'word': 'whereis(', 'kind': 'f', 'abbr': 'whereis/1', 'dup': 1}, {'word': 'xor(', 'kind': 'f', 'abbr': 'xor/2', 'dup': 1}, {'word': 'yield(', 'kind': 'f', 'abbr': 'yield() -> true', 'dup': 1}]}
